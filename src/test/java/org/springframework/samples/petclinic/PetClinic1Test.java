package org.springframework.samples.petclinic;
// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
public class PetClinic1Test {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
//	  System.setProperty("webdriver.chrome.driver","C:\\Program Files\\chrome\\chromedriver.exe");    
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void petClinic1() {
    // Test name: PetClinic1
    // Step # | name | target | value | comment
    // 1 | open | / |  | 
    driver.get("http://aa8ef252af0bf11e9b71402e8ed13fb5-326755540.us-east-1.elb.amazonaws.com/");
    // 2 | setWindowSize | 1532x820 |  | 
    driver.manage().window().setSize(new Dimension(1532, 820));
    // 3 | click | css=li:nth-child(3) span:nth-child(2) |  | 
    driver.findElement(By.cssSelector("li:nth-child(3) span:nth-child(2)")).click();
    // 4 | click | id=lastName |  | 
    driver.findElement(By.id("lastName")).click();
    // 5 | type | id=lastName | Ron | 
    driver.findElement(By.id("lastName")).sendKeys("Ron");
    // 6 | click | css=.btn:nth-child(1) |  | 
    driver.findElement(By.cssSelector(".btn:nth-child(1)")).click();
    // 7 | assertText | css=p | has not been found | Check that there are none.
    assertThat(driver.findElement(By.cssSelector("p")).getText(), is("has not been found"));
    // 8 | click | id=lastNameGroup |  | 
    driver.findElement(By.id("lastNameGroup")).click();
    // 9 | type | id=lastName | Peter | 
    driver.findElement(By.id("lastName")).sendKeys("Peter");
    // 10 | click | css=.btn:nth-child(1) |  | 
    driver.findElement(By.cssSelector(".btn:nth-child(1)")).click();
    // 11 | click | css=.xd-container |  | 
    driver.findElement(By.cssSelector(".xd-container")).click();
    // 12 | type | id=lastName | Chris | 
    driver.findElement(By.id("lastName")).sendKeys("Chris");
    // 13 | click | css=.btn:nth-child(1) |  | 
    driver.findElement(By.cssSelector(".btn:nth-child(1)")).click();
    // 14 | click | linkText=Add Owner |  | 
    driver.findElement(By.linkText("Add Owner")).click();
    // 15 | click | id=firstName |  | 
    driver.findElement(By.id("firstName")).click();
    // 16 | type | id=firstName | Chris | 
    driver.findElement(By.id("firstName")).sendKeys("Chris");
    // 17 | type | id=lastName | Cleverley | 
    driver.findElement(By.id("lastName")).sendKeys("Cleverley");
    // 18 | type | id=address | Smedenweg 19 | 
    driver.findElement(By.id("address")).sendKeys("Smedenweg 19");
    // 19 | type | id=city | Nieuw Vennep | 
    driver.findElement(By.id("city")).sendKeys("Nieuw Vennep");
    // 20 | type | id=telephone | 0641422705 | 
    driver.findElement(By.id("telephone")).sendKeys("0641422705");
    // 21 | click | css=.btn |  | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 22 | click | css=tr:nth-child(3) > th |  | 
    driver.findElement(By.cssSelector("tr:nth-child(3) > th")).click();
    // 23 | assertText | css=b | Chris Cleverley | Check that insert worked
    assertThat(driver.findElement(By.cssSelector("b")).getText(), is("Chris Cleverley"));
  }
}
